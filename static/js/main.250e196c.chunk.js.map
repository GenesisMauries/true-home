{"version":3,"sources":["Components/Label.js","Firestoredb.js","Components/Property.js","App.js","serviceWorker.js","index.js"],"names":["Label","react_default","a","createElement","Row","Col","xs","Jumbotron","className","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","base","firestore","Property","state","items","inputName","edit","id","fadeIn","message","changeValue","e","_this","setState","target","value","action","_this$state","collection","add","name","then","catch","error","update","getData","doc","get","exists","data","alert","console","log","_this$state2","deleteData","delete","_this2","this","onSnapshot","snapShots","docs","map","_this3","InputGroup","Input","placeholder","onChange","Button","color","onClick","Alert","in","tag","Table","hover","undefined","item","key","Component","App","Container","Components_Property","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.250e196c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Row, Col, Jumbotron} from 'reactstrap';\r\n\r\nexport default()=>{\r\n    return(\r\n        <div>\r\n        <Row>\r\n            <Col xs='12'>\r\n                <Jumbotron className='text-center'>\r\n                    <h1 className='display-5'>INMUEBLES RECIENTES</h1>\r\n                    <p className='lead'>Nosotros logramos que comprar sea un proceso Ã¡gil y profesional. </p>\r\n                </Jumbotron>\r\n            </Col>\r\n        </Row>\r\n\r\n        </div>\r\n    )\r\n}","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\n// Credenciales\r\nfirebase.initializeApp({\r\n    apiKey: \"AIzaSyDbnB68clKiG9Zec7f-jEqXrOPU5_5-g20\",\r\n    authDomain: \"true-home-4dcfb.firebaseapp.com\",\r\n    databaseURL: \"https://true-home-4dcfb.firebaseio.com\",\r\n    projectId: \"true-home-4dcfb\",\r\n    storageBucket: \"true-home-4dcfb.appspot.com\",\r\n    messagingSenderId: \"115760310833\"\r\n});\r\n\r\n// Variable de acceso a firestore\r\nlet base = firebase.firestore();\r\n\r\nexport default base;","import React, {Component} from 'react';\r\nimport base from '../Firestoredb';\r\nimport {Alert, Table, Button, Row, Col, InputGroup, Input} from 'reactstrap';\r\n\r\nclass Property extends Component{\r\n    state={\r\n        items:[],\r\n        inputName:'',\r\n        edit:false,\r\n        id:'',\r\n        fadeIn:false,\r\n        message:''\r\n    }\r\n    componentDidMount(){\r\n        base.collection('all').onSnapshot((snapShots) =>{\r\n            this.setState({\r\n                items:snapShots.docs.map((doc) =>{\r\n                    return{\r\n                        id:doc.id,\r\n                        data: doc.data()\r\n                    }\r\n                })\r\n            })\r\n        })\r\n        \r\n    }\r\n\r\n    changeValue= (e) =>{\r\n        this.setState({\r\n            inputName:e.target.value\r\n        })\r\n    }\r\n    //Agrega \r\n    action= ()=>{\r\n        const{inputName, edit} = this.state;\r\n\r\n        if(edit === false){\r\n            base.collection('all').add({\r\n                name: inputName\r\n            }).then(()=>{\r\n                this.message('Agregado');\r\n            }).catch((error)=>{\r\n                this.message(error);\r\n            })\r\n        }else{\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    //Edita\r\n    getData= (id)=>{\r\n      let ref= base.collection('all').doc(id);\r\n\r\n      ref.get().then((doc)=>{\r\n          if(doc.exists){\r\n              this.setState({\r\n                  inputName: doc.data().name,\r\n                  edit:true,\r\n                  id:doc.id\r\n              })\r\n          }else{\r\n              alert('El documento no existe');\r\n          }\r\n      }).catch((e)=>{\r\n          console.log(e);\r\n      })\r\n    }\r\n\r\n    update= ()=>{\r\n        const {id,inputName} = this.state;\r\n        base.collection('all').doc(id).update({\r\n            name: inputName\r\n        }).then(()=>{\r\n            this.message('Actualizado')\r\n        }).catch((error)=>{\r\n            this.message(error)\r\n        })\r\n        \r\n    }\r\n\r\n    //Borra\r\n    deleteData= (id)=>{\r\n        base.collection('all').doc(id).delete()\r\n        this.message('Propiedad eliminada')\r\n    }\r\n\r\n    //Mensaje\r\n    message= (message)=>{\r\n        this.setState({\r\n            fadeIn: true,\r\n            message: message,\r\n            inputName:''\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n        const {items} = this.state;\r\n        return(\r\n            <div>\r\n            <Row>\r\n                <Col xs='10'>\r\n                    <InputGroup>\r\n                        <Input\r\n                            placeholder='Nombre del propietario'\r\n                            value={this.state.inputName}\r\n                            onChange={this.changeValue}\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs='2'>\r\n                    <div className='text-right'>\r\n                        <Button color='info' onClick={this.action}>\r\n                        {this.state.edit ? 'Editar': 'Agregar'}\r\n                        </Button>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Alert in={this.state.fadeIn} tag='h6' className='mt-3 text-center text-success'>\r\n                {this.state.message}\r\n            </Alert>\r\n            <Table hover className='text-center mt-5'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Nombre</th>\r\n                        {/* <th>Domicilio</th>\r\n                        <th>Valor</th> */}\r\n                        <th>Editar</th>\r\n                        <th>Eliminar</th>\r\n                        \r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items && items !== undefined ? \r\n                      \r\n                      items.map((item, key)=>\r\n                      \r\n                        <tr key={key}>\r\n                          <td>{item.data.name}</td>\r\n                          {/* <td>{item.data.address}</td>\r\n                          <td>{item.data.item}</td> */}\r\n                          <td><Button color='warning' onClick={()=>this.getData(item.id)}>Editar</Button></td>\r\n                          <td><Button color='danger' onClick={()=>this.deleteData(item.id)}>Eliminar</Button></td>\r\n                          \r\n                        </tr>\r\n                     ) \r\n                     : <span>Null</span>}\r\n                </tbody>\r\n            </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Property;","import React, { Component } from 'react';\nimport {Container} from 'reactstrap';\nimport Label from './Components/Label';\nimport Property from './Components/Property';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <Container>\n      <Label />\n      <Property />\n\n      </Container>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}